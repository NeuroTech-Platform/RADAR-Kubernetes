apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "s3-proxy.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "s3-proxy.name" . }}
    helm.sh/chart: {{ include "s3-proxy.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "s3-proxy.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "s3-proxy.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app.kubernetes.io/name"
                    operator: In
                    values:
                    - {{ template "s3-proxy.name" . }}
                  - key: "app.kubernetes.io/instance"
                    operator: In
                    values:
                    - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: S3PROXY_AUTHORIZATION
            value: "aws-v2-or-v4"
          - name: S3PROXY_IDENTITY
            value: "{{ .Values.s3AccessKey }}"
          - name: S3PROXY_IDENTITY
            value: "{{ .Values.s3Secret }}"
          - name: JCLOUD_ENDPOINT
            value: "{{ .Values.endpoint }}"
          - name: JCLOUD_PROVIDER
            value: "{{ .Values.provider }}"
          - name: JCLOUD_IDENTITY
            value: "{{ .Values.identity }}"
          - name: JCLOUD_CREDENTIAL
            value: "{{ .Values.credential }}"
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            exec:
              command: [/usr/bin/nc, -zv, localhost, "80"]
            initialDelaySeconds: 5
            periodSeconds: 60
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command: [/usr/bin/nc, -zv, localhost, "80"]
            initialDelaySeconds: 5
            periodSeconds: 60
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
